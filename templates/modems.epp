<%- |
  String                                                          $name,

  # Properties for physical device types
  Optional[Struct[{
        Optional['name']             => String,
        Optional['macaddress']       => Stdlib::MAC,
        Optional['driver']           => String,
  }]]                                                             $match = undef,
  Optional[String]                                                $set_name = undef,
  Optional[Boolean]                                               $wakeonlan = undef,
  Optional[Boolean]                                               $emit_lldp = undef,
  Optional[Boolean]                                               $receive_checksum_offload = undef,
  Optional[Boolean]                                               $transmit_checksum_offload = undef,
  Optional[Boolean]                                               $tcp_segmentation_offload = undef,
  Optional[Boolean]                                               $tcp6_segmentation_offload = undef,
  Optional[Boolean]                                               $generic_segmentation_offload = undef,
  Optional[Boolean]                                               $generic_receive_offload = undef,
  Optional[Boolean]                                               $large_receive_offload = undef,
  Optional[Struct[{
        Optional['external_ids']     => String,
        Optional['other_config']     => String,
        Optional['lacp']             => Enum['active', 'passive', 'off'],
        Optional['fail_mode']        => Enum['secure', 'standalone', 'off'],
        Optional['mcast_snooping']   => Boolean,
        Optional['protocols']        => Array[String],
        Optional['rstp']             => Boolean,
        Optional['controller']       => Struct[{
            Optional['addresses']           => Array[String],
            Optional['connection_mode']     => Enum['in-band', 'out-of-band'],
        }],
        Optional['ports']            => Array[Array[String]],
        Optional['ssl']              => Struct[{
            Optional['ca_cert']             => String,
            Optional['certificate']         => String,
            Optional['private_key']         => String,
        }],
  }]]                                                             $openvswitch = undef,

  # Properties for all device types
  Optional[Enum['NetworkManager']]                                $renderer = undef,
  #lint:ignore:quoted_booleans
  Optional[Variant[Enum['true', 'false', 'yes', 'no'], Boolean]]  $dhcp4 = undef,
  Optional[Variant[Enum['true', 'false', 'yes', 'no'], Boolean]]  $dhcp6 = undef,
  #lint:endignore
  Optional[Integer]                                               $ipv6_mtu = undef,
  Optional[Boolean]                                               $ipv6_privacy = undef,
  Optional[Tuple[Enum['ipv4', 'ipv6'], 0]]                        $link_local = undef,
  Optional[Boolean]                                               $ignore_carrier = undef,
  Optional[Boolean]                                               $critical = undef,
  Optional[Enum['mac']]                                           $dhcp_identifier = undef,
  Optional[Struct[{
        Optional['use_dns']         => Boolean,
        Optional['use_ntp']         => Boolean,
        Optional['send_hostname']   => Boolean,
        Optional['use_hostname']    => Boolean,
        Optional['use_mtu']         => Boolean,
        Optional['hostname']        => Stdlib::Fqdn,
        Optional['use_routes']      => Boolean,
        Optional['route_metric']    => Integer,
        Optional['use_domains']     => Variant[Enum['route', 'true', 'false', 'yes', 'no'], Boolean],
  }]]                                                             $dhcp4_overrides = undef,
  Optional[Struct[{
        Optional['use_dns']         => Boolean,
        Optional['use_ntp']         => Boolean,
        Optional['send_hostname']   => Boolean,
        Optional['use_hostname']    => Boolean,
        Optional['use_mtu']         => Boolean,
        Optional['hostname']        => Stdlib::Fqdn,
        Optional['use_routes']      => Boolean,
        Optional['route_metric']    => Integer,
        Optional['use_domains']     => Variant[Enum['route', 'true', 'false', 'yes', 'no'], Boolean],
  }]]                                                             $dhcp6_overrides = undef,
  Optional[Boolean]                                               $accept_ra = undef,
  Optional[Array[Variant[
      Stdlib::IP::Address,
      Hash[
            Stdlib::IP::Address,
            Struct[{
                  Optional['lifetime'] => Variant[Enum['forever'], Integer[0,0]],
                  Optional['label']    => String[1]
            }]
      ]
  ]]]                                                             $addresses = undef,
  Optional[Enum['eui64', 'stable-privacy']]                       $ipv6_address_generation = undef,
  Optional[String]                                                $ipv6_address_token = undef,
  Optional[Stdlib::IP::Address::V4::Nosubnet]                     $gateway4 = undef,
  Optional[Stdlib::IP::Address::V6::Nosubnet]                     $gateway6 = undef,
  Optional[Struct[{
        Optional['search']          => Array[Stdlib::Fqdn],
        'addresses'                 => Array[Stdlib::IP::Address]
  }]]                                                             $nameservers = undef,
  Optional[Stdlib::MAC]                                           $macaddress = undef,
  Optional[Integer]                                               $mtu = undef,
  Optional[Boolean]                                               $optional = undef,
  Optional[Array[String]]                                         $optional_addresses = undef,
  Optional[Enum['manual', 'off']]                                 $activation_mode = undef,
  Optional[Array[Struct[{
          Optional['from']                      => Stdlib::IP::Address,
          'to'                                  => Variant[Stdlib::IP::Address, Enum['default', '0.0.0.0/0', '::/0']],
          Optional['via']                       => Stdlib::IP::Address::Nosubnet,
          Optional['on_link']                   => Boolean,
          Optional['metric']                    => Integer,
          Optional['type']                      => Enum['unicast', 'unreachable', 'blackhole', 'prohibited'],
          Optional['scope']                     => Enum['global', 'link', 'host'],
          Optional['table']                     => Integer,
          Optional['mtu']                       => Integer,
          Optional['congestion_window']         => Integer,
          Optional['advertised_receive_window'] => Integer,
  }]]]                                                            $routes = undef,
  Optional[Array[Struct[{
          'from'                      => Stdlib::IP::Address,
          'to'                        => Variant[Stdlib::IP::Address, Enum['default', '0.0.0.0/0', '::/0']],
          Optional['table']           => Integer,
          Optional['priority']        => Integer,
          Optional['mark']            => Integer,
          Optional['type_of_service'] => Integer,
  }]]]                                                            $routing_policy = undef,
  Optional[Boolean]                                               $neigh_suppress = undef,

  # Properties for device type modems
  Optional[String]                                                $apn = undef,
  Optional[Boolean]                                               $auto_config = undef,
  Optional[String]                                                $device_id = undef,
  Optional[Integer]                                               $network_id = undef,
  Optional[String]                                                $number = undef,
  Optional[String]                                                $password = undef,
  Optional[Integer]                                               $pin = undef,
  Optional[String]                                                $sim_id = undef,
  Optional[Integer]                                               $sim_operator_id = undef,
  Optional[String]                                                $username = undef,

| -%>
    <%= $name %>:
    <%# Properties for physical device types -%>
    <%- if $match != undef { -%>
      match:
      <%- if $match[name] != undef { -%>
        name: <%= $match[name] %>
      <%- } -%>
      <%- if $match[macaddress] != undef { -%>
        macaddress: <%= $match[macaddress] %>
      <%- } -%>
      <%- if $match[driver] != undef { -%>
        driver: <%= $match[driver] %>
      <%- } -%>
    <%- } -%>
    <%- if $set_name != undef { -%>
      set-name: <%= $set_name %>
    <%- } -%>
    <%- if $wakeonlan != undef { -%>
      wakeonlan: <%= $wakeonlan %>
    <%- } -%>
    <%- if $emit_lldp != undef { -%>
      emit-lldp: <%= $emit_lldp %>
    <%- } -%>
    <%- if $receive_checksum_offload != undef { -%>
      receive-checksum-offload: <%= $receive_checksum_offload %>
    <%- } -%>
    <%- if $transmit_checksum_offload != undef { -%>
      transmit-checksum-offload: <%= $transmit_checksum_offload %>
    <%- } -%>
    <%- if $tcp_segmentation_offload != undef { -%>
      tcp-segmentation-offload: <%= $tcp_segmentation_offload %>
    <%- } -%>
    <%- if $tcp6_segmentation_offload != undef { -%>
      tcp6-segmentation-offload: <%= $tcp6_segmentation_offload %>
    <%- } -%>
    <%- if $generic_segmentation_offload != undef { -%>
      generic-segmentation-offload: <%= $generic_segmentation_offload %>
    <%- } -%>
    <%- if $generic_receive_offload != undef { -%>
      generic-receive-offload: <%= $generic_receive_offload %>
    <%- } -%>
    <%- if $large_receive_offload != undef { -%>
      large-receive-offload: <%= $large_receive_offload %>
    <%- } -%>
    <%- if $openvswitch != undef { -%>
      openvswitch:
        <%- if $openvswitch[external_ids] != undef { -%>
        external-ids:
<%= $openvswitch[external_ids] %>
        <%- } -%>
        <%- if $openvswitch[other_config] != undef { -%>
        other-config:
<%= $openvswitch[other_config] %>
        <%- } -%>
        <%- if $openvswitch[lacp] != undef { -%>
        lacp: <%= $openvswitch[lacp] %>
        <%- } -%>
        <%- if $openvswitch[fail_mode] != undef { -%>
        fail-mode: <%= $openvswitch[fail_mode] %>
        <%- } -%>
        <%- if $openvswitch[mcast_snooping] != undef { -%>
        mcast-snooping: <%= $openvswitch[mcast_snooping] %>
        <%- } -%>
        <%- if $openvswitch[protocols] != undef { -%>
        protocols: <%= $openvswitch[protocols] %>
        <%- } -%>
        <%- if $openvswitch[rstp] != undef { -%>
        rstp: <%= $openvswitch[rstp] %>
        <%- } -%>
        <%- if $openvswitch[controller] { -%>
        controller:
          <%- if $openvswitch[controller][addresses] != undef { -%>
          addresses:
        <%- $openvswitch[controller][addresses].each |$address| { -%>
            - "<%= $address %>"
        <%- } -%>
          <%- } -%>
          <%- if $openvswitch[controller][connection_mode] != undef { -%>
          connection-mode: <%= $openvswitch[controller][connection_mode] %>
          <%- } -%>
        <%- } -%>
        <%- if $openvswitch[ports] != undef { -%>
        ports: <%= $openvswitch[ports] %>
        <%- } -%>
        <%- if $openvswitch[ssl] != undef { -%>
        ssl:
          <%- if $openvswitch[ssl][ca_cert] != undef { -%>
          ca-cert: <%= $openvswitch[ssl][ca_cert] %>
          <%- } -%>
          <%- if $openvswitch[ssl][certificate] != undef { -%>
          certificate: <%= $openvswitch[ssl][certificate] %>
          <%- } -%>
          <%- if $openvswitch[ssl][private_key] != undef { -%>
          private-key: <%= $openvswitch[ssl][private_key] %>
          <%- } -%>
        <%- } -%>
    <%- } -%>
    <%# Properties for all device types -%>
    <%- if $renderer != undef { -%>
      renderer: <%= $renderer %>
    <%- } -%>
    <%- if $dhcp4 != undef { -%>
      dhcp4: <%= $dhcp4 %>
    <%- } -%>
    <%- if $dhcp6 != undef { -%>
      dhcp6: <%= $dhcp6 %>
    <%- } -%>
    <%- if $ipv6_mtu != undef { -%>
      ipv6-mtu: <%= $ipv6_mtu %>
    <%- } -%>
    <%- if $ipv6_privacy != undef { -%>
      ipv6-privacy: <%= $ipv6_privacy %>
    <%- } -%>
    <%- if $link_local != undef { -%>
      link-local: <%= $link_local %>
    <%- } -%>
    <%- if $ignore_carrier != undef { -%>
      ignore-carrier: <%= $ignore_carrier %>
    <%- } -%>
    <%- if $critical != undef { -%>
      critical: <%= $critical %>
    <%- } -%>
    <%- if $dhcp_identifier != undef { -%>
      dhcp-identifier: <%= $dhcp_identifier %>
    <%- } -%>
    <%- if $dhcp4_overrides != undef { -%>
      dhcp4-overrides:
        <%- if $dhcp4_overrides[use_dns] != undef { -%>
        use-dns: <%= $dhcp4_overrides[use_dns] %>
        <%- } -%>
        <%- if $dhcp4_overrides[use_ntp] != undef { -%>
        use-ntp: <%= $dhcp4_overrides[use_ntp] %>
        <%- } -%>
        <%- if $dhcp4_overrides[send_hostname] != undef { -%>
        send-hostname: <%= $dhcp4_overrides[send_hostname] %>
        <%- } -%>
        <%- if $dhcp4_overrides[use_hostname] != undef { -%>
        use-hostname: <%= $dhcp4_overrides[use_hostname] %>
        <%- } -%>
        <%- if $dhcp4_overrides[use_mtu] != undef { -%>
        use-mtu: <%= $dhcp4_overrides[use_mtu] %>
        <%- } -%>
        <%- if $dhcp4_overrides[hostname] != undef { -%>
        hostname: <%= $dhcp4_overrides[hostname] %>
        <%- } -%>
        <%- if $dhcp4_overrides[use_routes] != undef { -%>
        use-routes: <%= $dhcp4_overrides[use_routes] %>
        <%- } -%>
        <%- if $dhcp4_overrides[route_metric] != undef { -%>
        route-metric: <%= $dhcp4_overrides[route_metric] %>
        <%- } -%>
        <%- if $dhcp4_overrides[use_domains] != undef { -%>
        use-domains: <%= $dhcp4_overrides[use_domains] %>
        <%- } -%>
    <%- } -%>
    <%- if $dhcp6_overrides != undef { -%>
      dhcp6-overrides:
        <%- if $dhcp6_overrides[use_dns] != undef { -%>
        use-dns: <%= $dhcp6_overrides[use_dns] %>
        <%- } -%>
        <%- if $dhcp6_overrides[use_ntp] != undef { -%>
        use-ntp: <%= $dhcp6_overrides[use_ntp] %>
        <%- } -%>
        <%- if $dhcp6_overrides[send_hostname] != undef { -%>
        send-hostname: <%= $dhcp6_overrides[send_hostname] %>
        <%- } -%>
        <%- if $dhcp6_overrides[use_hostname] != undef { -%>
        use-hostname: <%= $dhcp6_overrides[use_hostname] %>
        <%- } -%>
        <%- if $dhcp6_overrides[use_mtu] != undef { -%>
        use-mtu: <%= $dhcp6_overrides[use_mtu] %>
        <%- } -%>
        <%- if $dhcp6_overrides[hostname] != undef { -%>
        hostname: <%= $dhcp6_overrides[hostname] %>
        <%- } -%>
        <%- if $dhcp6_overrides[use_routes] != undef { -%>
        use-routes: <%= $dhcp6_overrides[use_routes] %>
        <%- } -%>
        <%- if $dhcp6_overrides[route_metric] != undef { -%>
        route-metric: <%= $dhcp6_overrides[route_metric] %>
        <%- } -%>
        <%- if $dhcp6_overrides[use_domains] != undef { -%>
        use-domains: <%= $dhcp6_overrides[use_domains] %>
        <%- } -%>
    <%- } -%>
    <%- if $accept_ra != undef { -%>
      accept-ra: <%= $accept_ra %>
    <%- } -%>
    <%- if $addresses != undef { -%>
      addresses:
      <%- $addresses.each | $address | { -%>
        <%- if $address.is_a(Hash) { -%>
          <%- $address.each | $add, $option | { -%>
        - <%= $add %>:
            <%- if $option['lifetime'] != undef { -%>
            lifetime: <%= $option['lifetime'] %>
            <%- } -%>
            <%- if $option['label'] != undef { -%>
            label: <%= $option['label'] %>
            <%- } -%>
          <%- } -%>
        <%- } else { -%>
        - <%= $address %>
        <%- } -%>
      <%- } -%>
    <%- } -%>
    <%- if $ipv6_address_generation != undef { -%>
      ipv6-address-generation: <%= $ipv6_address_generation %>
    <%- } -%>
    <%- if $ipv6_address_token != undef { -%>
      ipv6-address-token: <%= $ipv6_address_token %>
    <%- } -%>
    <%- if $gateway4 != undef { -%>
      gateway4: <%= $gateway4 %>
    <%- } -%>
    <%- if $gateway6 != undef { -%>
      gateway6: <%= $gateway6 %>
    <%- } -%>
    <%- if $nameservers != undef { -%>
      nameservers:
      <%- if $nameservers[search] != undef { -%>
        search:
      <%- $nameservers[search].each |$search| { -%>
          - <%= $search %>
      <%- } -%>
      <%- } -%>
      <%- if $nameservers[addresses] != undef { -%>
        addresses:
      <%- $nameservers[addresses].each |$address| { -%>
          - <%= $address %>
      <%- } -%>
      <%- } -%>
    <%- } -%>
    <%- if $macaddress != undef { -%>
      macaddress: <%= $macaddress %>
    <%- } -%>
    <%- if $mtu != undef { -%>
      mtu: <%= $mtu %>
    <%- } -%>
    <%- if $optional != undef { -%>
      optional: <%= $optional %>
    <%- } -%>
    <%- if $optional_addresses != undef { -%>
      optional-addresses:
      <%- $optional_addresses.each |$optional_address| { -%>
        - <%= $optional_address %>
      <%- } -%>
    <%- } -%>
    <%- if $activation_mode != undef { -%>
      activation-mode: <%= $activation_mode %>
    <%- } -%>
    <%- if $routes != undef { -%>
      routes:
      <%- $routes.each |$route| { -%>
        - to: <%= $route[to] %>
          <%- if $route[via] != undef { -%>
          via: <%= $route[via] %>
          <%- } -%>
          <%- if $route[from] != undef { -%>
          from: <%= $route[from] %>
          <%- } -%>
          <%- if $route[on_link] != undef { -%>
          on-link: <%= $route[on_link] %>
          <%- } -%>
          <%- if $route[metric] != undef { -%>
          metric: <%= $route[metric] %>
          <%- } -%>
          <%- if $route['type'] != undef { -%>
          type: <%= $route['type'] %>
          <%- } -%>
          <%- if $route[scope] != undef { -%>
          scope: <%= $route[scope] %>
          <%- } -%>
          <%- if $route[table] != undef { -%>
          table: <%= $route[table] %>
          <%- } -%>
          <%- if $route[mtu] != undef { -%>
          mtu: <%= $route[mtu] %>
          <%- } -%>
          <%- if $route[congestion_window] != undef { -%>
          congestion-window: <%= $route[congestion_window] %>
          <%- } -%>
          <%- if $route[advertised_receive_window] != undef { -%>
          advertised-receive-window: <%= $route[advertised_receive_window] %>
          <%- } -%>
      <%- } -%>
    <%- } -%>
    <%- if $routing_policy != undef { -%>
      routing-policy:
      <%- $routing_policy.each |$policy| { -%>
        - to: <%= $policy[to] %>
          from: <%= $policy[from] %>
          <%- if $policy[table] != undef { -%>
          table: <%= $policy[table] %>
          <%- } -%>
          <%- if $policy[priority] != undef { -%>
          priority: <%= $policy[priority] %>
          <%- } -%>
      <%- } -%>
    <%- } -%>
    <%- if $neigh_suppress != undef { -%>
      neigh-suppress: <%= $neigh_suppress %>
    <%- } -%>
    <%- if $apn != undef { -%>
      apn: <%= $apn %>
    <%- } -%>
    <%- if $auto_config != undef { -%>
      auto-config: <%= $auto_config %>
    <%- } -%>
    <%- if $device_id != undef { -%>
      device-id: <%= $device_id %>
    <%- } -%>
    <%- if $network_id != undef { -%>
      network-id: <%= $network_id %>
    <%- } -%>
    <%- if $number != undef { -%>
      number: "<%= $number %>"
    <%- } -%>
    <%- if $password != undef { -%>
      password: <%= $password %>
    <%- } -%>
    <%- if $pin != undef { -%>
      pin: <%= $pin %>
    <%- } -%>
    <%- if $sim_id != undef { -%>
      sim-id: <%= $sim_id %>
    <%- } -%>
    <%- if $sim_operator_id != undef { -%>
      sim-operator-id: <%= $sim_operator_id %>
    <%- } -%>
    <%- if $username != undef { -%>
      username: <%= $username %>
    <%- } -%>
